// <auto-generated />
using System;
using CoksaProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoksaProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200704200736_dodaniOstaliZadaci")]
    partial class dodaniOstaliZadaci
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoksaProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DrivingSchoolID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("DrivingSchoolID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoksaProject.Models.Candidate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DriverTestPassed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAidPassed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("HoursDriven")
                        .HasColumnType("bit");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MobileNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InstructorId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CoksaProject.Models.CandidateTasks", b =>
                {
                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("TasksID")
                        .HasColumnType("int");

                    b.Property<int>("HoursID")
                        .HasColumnType("int");

                    b.HasKey("CandidateID", "TasksID", "HoursID");

                    b.HasIndex("HoursID");

                    b.HasIndex("TasksID");

                    b.ToTable("CandidateTaskses");
                });

            modelBuilder.Entity("CoksaProject.Models.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Brand = "BMW M4",
                            ManufactureYear = 2016
                        },
                        new
                        {
                            ID = 2,
                            Brand = "Audi A4",
                            ManufactureYear = 2019
                        },
                        new
                        {
                            ID = 3,
                            Brand = "Ford Focus RS",
                            ManufactureYear = 2016
                        });
                });

            modelBuilder.Entity("CoksaProject.Models.DrivingSchool", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Established")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DrivingSchools");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Sibenik",
                            Country = "Hrvatska",
                            Established = 1990,
                            Name = "Autoskola Neno"
                        },
                        new
                        {
                            ID = 2,
                            City = "Sibenik",
                            Country = "Hrvatska",
                            Established = 1995,
                            Name = "Autoskola Zeleni Val"
                        });
                });

            modelBuilder.Entity("CoksaProject.Models.DrivingSchoolCars", b =>
                {
                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("DrivingSchoolID")
                        .HasColumnType("int");

                    b.HasKey("CarID", "DrivingSchoolID");

                    b.HasIndex("DrivingSchoolID");

                    b.ToTable("DrivingSchoolCarz");
                });

            modelBuilder.Entity("CoksaProject.Models.Hours", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HoursN")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Hourses");
                });

            modelBuilder.Entity("CoksaProject.Models.Tasks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("HoursCompleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Taskses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CodeName = "A1",
                            Description = "Upoznavanje vozila, Voznja po pravcu, mijenjanje brzina i zaustavljanje",
                            Hours = 1,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 2,
                            CodeName = "A2",
                            Description = "Voznja unaprijed-unatrag po pravcu s promjenom smjera",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 3,
                            CodeName = "A3",
                            Description = "Okretanje vozila zbog promjene smjera",
                            Hours = 1,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 4,
                            CodeName = "A4",
                            Description = "Parkiranje vozila",
                            Hours = 1,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 5,
                            CodeName = "A5",
                            Description = "Kocenje i zaustavljanje",
                            Hours = 1,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 6,
                            CodeName = "B1",
                            Description = "Ukljucivanje u promet i iskljucivanje iz prometa",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 7,
                            CodeName = "B2",
                            Description = "Polukruzno okretanje, okretanje vozila s vise postupaka, okretanje vozila zbog promjene smjera, parkiranje vozila",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 8,
                            CodeName = "B3",
                            Description = "Postupanje prema znakovima u prometu",
                            Hours = 4,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 9,
                            CodeName = "B4",
                            Description = "Voznja",
                            Hours = 4,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 10,
                            CodeName = "B5",
                            Description = "Voznja zavojima, prilagodba brzine voznje, kocenje",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 11,
                            CodeName = "B6",
                            Description = "Voznja raskrizjem",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 12,
                            CodeName = "B7",
                            Description = "Pretjecanje i  obilaznje",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 13,
                            CodeName = "B8",
                            Description = "Ukljucivanje na autocestu ili brzu cestu ili cestu namijenjenu za promet motornih vozila i iskljucivanje s tih cesta",
                            Hours = 3,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 14,
                            CodeName = "B9",
                            Description = "Voznja u naselju (gradu) i izvan naselja (grada)",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 15,
                            CodeName = "B10",
                            Description = "Voznja prometnicama s posebnim karakteristikama",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 16,
                            CodeName = "B11",
                            Description = "Samostalna voznja",
                            Hours = 1,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 17,
                            CodeName = "B12",
                            Description = "Sigurna i energetski ucinkovita voznja",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        },
                        new
                        {
                            ID = 18,
                            CodeName = "B13",
                            Description = "Ponasanje prema drugim sudionicima u prometu sukladno prometnim propisima i pravilima",
                            Hours = 2,
                            HoursCompleted = 0,
                            IsCompleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoksaProject.Models.ApplicationUser", b =>
                {
                    b.HasOne("CoksaProject.Models.Car", "Car")
                        .WithMany("Instructors")
                        .HasForeignKey("CarID");

                    b.HasOne("CoksaProject.Models.DrivingSchool", "DrivingSchool")
                        .WithMany("Instructors")
                        .HasForeignKey("DrivingSchoolID");
                });

            modelBuilder.Entity("CoksaProject.Models.Candidate", b =>
                {
                    b.HasOne("CoksaProject.Models.ApplicationUser", "Instructor")
                        .WithMany("Candidates")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("CoksaProject.Models.CandidateTasks", b =>
                {
                    b.HasOne("CoksaProject.Models.Candidate", "Candidate")
                        .WithMany("CandidateTaskses")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoksaProject.Models.Hours", "Hours")
                        .WithMany("CandidateTaskses")
                        .HasForeignKey("HoursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoksaProject.Models.Tasks", "Tasks")
                        .WithMany("CandidateTaskses")
                        .HasForeignKey("TasksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoksaProject.Models.DrivingSchoolCars", b =>
                {
                    b.HasOne("CoksaProject.Models.Car", "Car")
                        .WithMany("DrivingSchoolCarz")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoksaProject.Models.DrivingSchool", "DrivingSchool")
                        .WithMany("DrivingSchoolCarz")
                        .HasForeignKey("DrivingSchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoksaProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoksaProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoksaProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoksaProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
